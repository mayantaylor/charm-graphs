mainmodule weighted_htram_smp
{
  include "weighted_node_struct.h";
  extern module htram_group;
  readonly CProxy_Main mainProxy;
  readonly CProxy_WeightedArray arr;
  readonly CProxy_SharedInfo shared;
  readonly int N;
  readonly int V;
  readonly int imax;
  readonly int average;
  readonly int buffer_size;
  readonly int histo_bucket_count;
  readonly int initial_threshold;
  readonly double reduction_delay;
  readonly double flush_timer;
  readonly bool enable_buffer_flushing;
  mainchare Main
  {
    entry Main(CkArgMsg* m);
    entry [reductiontarget] void begin(int max_sum); //wait for all chares to receive graph partition, register qd callback here (callback to done method), start algorithm
    entry void print(); //bcast to chares to print distances
    entry [reductiontarget, expedited] void reduce_histogram(int histo_values[N], int histo_length);
    entry [reductiontarget] void done(int msg_stats[N], int N); //bcast to chares to print results and end program
    entry [reductiontarget] void check_buffer_done(int msg_stats[N], int N);
  };
  array [1D] WeightedArray
  {
    entry WeightedArray();
    entry void initiate_pointers();
    entry void get_graph(LongEdge edges[E], int E, int partition[dividers], int dividers); //gets graph partition
    entry void start_algo(std::pair<int, int> new_vertex_and_distance);
    entry [whenidle] bool update_distances_local();
    entry void update_distances(std::pair<int,int> new_vertex_and_distance); //receives an updated vertex num and distance, and calls this method on neighbor chares
    entry void check_buffer(); // checks for false quiescence
    entry [expedited] void contribute_histogram(); //contributes histogram to main pe
    entry void keep_going(); // flush buffers
    entry void get_bucket_limit(int bucket, int tram_bucket); // broadcast bucket limit
    entry void print_distances(); // print out the distances on each chare
    entry void stop_periodic_flush();
  };
  group SharedInfo
  {
    entry SharedInfo();
    entry void max_path_value(int max_path_val);
  };

};
