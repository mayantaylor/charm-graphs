mainmodule weighted
{
  include "weighted_node_struct.h";
  readonly CProxy_Main mainProxy;
  readonly CProxy_WeightedArray arr;
  readonly int N;
  readonly int V;
  readonly int imax;
  readonly int average;
  mainchare Main
  {
    entry Main(CkArgMsg* m);
    entry [reductiontarget] void begin(int result); //wait for all chares to receive graph partition, register qd callback here (callback to done method), start algorithm
    entry void print(); //bcast to chares to print distances
    entry [reductiontarget] void done(int result); //bcast to chares to print results and end program
  };
  array [1D] WeightedArray
  {
    entry WeightedArray();
    entry void get_graph(CkVec<LongEdge> edges, int partition[N], int N); //gets graph partition
    entry [aggregate(numDimensions: 1, bufferSize: 1024, thresholdNumer: 1, thresholdDenom: 1, cutoffNumer: 1, cutoffDenom: 1, maxItems: 4)] void update_distances(std::pair<int,int> new_vertex_and_distance); //receives an updated vertex num and distance, and calls this method on neighbor chares
    entry void print_distances(); // print out the distances on each chare
  };

};
